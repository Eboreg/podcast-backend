# Generated by Django 5.2.3 on 2025-07-02 00:12

import ipaddress
import socket

from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations

from logs.ip_check import (
    get_geoip2_asn,
    get_geoip2_city,
    get_ip_address_category,
)


def migrate(apps, schema_editor):
    GeoIP = apps.get_model("logs", "GeoIP")

    def get_or_create_geoip(ip: str):
        if ipaddress.ip_address(ip).is_private:
            return None

        try:
            return GeoIP.objects.get(ip=ip)
        except ObjectDoesNotExist:
            geoip2_city = get_geoip2_city(ip)
            if geoip2_city:
                geoip2_asn = get_geoip2_asn(ip)
                return GeoIP.objects.create(
                    ip=ip,
                    city=geoip2_city.city.name or "",
                    region=(geoip2_city.subdivisions[0].name or "") if geoip2_city.subdivisions else "",
                    country=geoip2_city.country.iso_code or "",
                    org=(geoip2_asn.autonomous_system_organization or "") if geoip2_asn else "",
                )

        return None

    PodcastRssRequestLog = apps.get_model("logs", "PodcastRssRequestLog")
    PodcastRssRequestLog2 = apps.get_model("logs", "PodcastRssRequestLog2")
    Podcast = apps.get_model("podcasts", "Podcast")
    podcasts = {p.slug: p for p in Podcast.objects.all()}
    old_log_count = PodcastRssRequestLog.objects.count()

    for index, old_log in enumerate(PodcastRssRequestLog.objects.all()):
        print(f"{index + 1}/{old_log_count}")
        parts = old_log.path_info.strip("/").split("/")
        if len(parts) >= 2:
            slug = parts[1]
            if slug in podcasts:
                podcast = podcasts[slug]
                remote_addr_category = get_ip_address_category(old_log.remote_addr)
                geoip = get_or_create_geoip(old_log.remote_addr) if old_log.remote_addr else None
                remote_host = socket.getfqdn(old_log.remote_addr) if old_log.remote_addr else ""
                PodcastRssRequestLog2.objects.create(
                    created=old_log.created,
                    path_info=old_log.path_info,
                    remote_addr=old_log.remote_addr,
                    referrer=old_log.referrer,
                    remote_addr_category=remote_addr_category,
                    podcast=podcast,
                    geoip=geoip,
                    remote_host=remote_host if remote_host != old_log.remote_addr else "",
                )


class Migration(migrations.Migration):
    dependencies = [
        ('logs', '0004_podcastrssrequestlog2'),
        ("podcasts", "0002_initial"),
    ]

    operations = [
        migrations.RunPython(migrate, migrations.RunPython.noop),
    ]
