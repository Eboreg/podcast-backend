# Generated by Django 5.1.6 on 2025-04-22 20:18

from django.db import migrations
from django.db.models import Max, Q

from logs.user_agent import get_useragent_data


def migrate_object(old_log, new_model, UserAgent, user_agents: dict, extra_attrs: list):
    remote_addr = old_log.remote_addr.split(":")[0] if old_log.remote_addr else None

    new_log = new_model(
        created=old_log.created,
        is_bot=old_log.is_bot,
        path_info=old_log.path_info,
        user_agent=old_log.user_agent,
        remote_addr=remote_addr,
        remote_addr_category=old_log.remote_addr_category,
        referrer=old_log.referrer,
        referrer_category=old_log.referrer_category,
        referrer_name=old_log.referrer_name,
    )

    if old_log.user_agent:
        if old_log.user_agent.lower() in user_agents:
            new_log.user_agent_data = user_agents[old_log.user_agent.lower()]
        else:
            ua_data = get_useragent_data(old_log.user_agent)
            if ua_data:
                try:
                    user_agent = UserAgent.objects.create(
                        user_agent=old_log.user_agent,
                        name=ua_data.name,
                        type=ua_data.type,
                        device_category=ua_data.device_category,
                        device_name=ua_data.device_name,
                    )
                    new_log.user_agent_data = user_agent
                    user_agents[old_log.user_agent.lower()] = user_agent
                except Exception as e:
                    print(e)
            else:
                user_agents[old_log.user_agent.lower()] = None

    for attr in extra_attrs:
        setattr(new_log, attr, getattr(old_log, attr))

    return new_log


def migrate_model(old_model, new_model, UserAgent, user_agents: dict, extra_attrs: list):
    latest_dict = new_model.objects.aggregate(max_created=Max("created"))
    q = Q(created__gt=latest_dict["max_created"]) if latest_dict.get("max_created") else Q()
    qs = old_model.objects.filter(q)
    obj_count = qs.count()

    for idx, old_log in enumerate(qs):
        print(f"{old_model.__name__} {idx + 1}/{obj_count}")
        new_log = migrate_object(old_log, new_model, UserAgent, user_agents, extra_attrs)
        new_log.save()


def migrate(apps, schema_editor):
    UserAgent = apps.get_model("logs", "UserAgent")

    PodcastRequestLog = apps.get_model("logs", "PodcastRequestLog")
    PodcastRssRequestLog = apps.get_model("logs", "PodcastRssRequestLog")
    PodcastContentRequestLog = apps.get_model("logs", "PodcastContentRequestLog")
    PodcastEpisodeAudioRequestLog = apps.get_model("logs", "PodcastEpisodeAudioRequestLog")

    PodcastRequestLog2 = apps.get_model("logs", "PodcastRequestLog2")
    PodcastRssRequestLog2 = apps.get_model("logs", "PodcastRssRequestLog2")
    PodcastContentRequestLog2 = apps.get_model("logs", "PodcastContentRequestLog2")
    PodcastContentAudioRequestLog2 = apps.get_model("logs", "PodcastContentAudioRequestLog2")

    ua = {u.pk.lower(): u for u in UserAgent.objects.all()}

    migrate_model(PodcastRequestLog2, PodcastRequestLog, UserAgent, ua, ["podcast"])
    migrate_model(PodcastRssRequestLog2, PodcastRssRequestLog, UserAgent, ua, ["podcast"])
    migrate_model(PodcastContentRequestLog2, PodcastContentRequestLog, UserAgent, ua, ["content"])
    migrate_model(
        PodcastContentAudioRequestLog2,
        PodcastEpisodeAudioRequestLog,
        UserAgent,
        ua,
        ["episode", "duration_ms", "response_body_size", "status_code"],
    )


class Migration(migrations.Migration):

    dependencies = [
        ('logs', '0009_geoip_hostname'),
    ]

    operations = [
        migrations.RunPython(migrate, migrations.RunPython.noop),
    ]
